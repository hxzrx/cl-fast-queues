(in-package :cl-fast-queues-tests)


(define-test make-dlist :parent dlist
  (finish (dlist::make-dlist 0))
  (finish (dlist::make-dlist 0 1))
  (finish (dlist::make-dlist 0 1 2 3)))

(define-test node-content-compare :parent dlist
  (let* ((dlist (dlist::make-dlist 0 0 1))
         (node0 (dlist::dlist-head dlist))
         (node1 (dlist::node-next node0))
         (node2 (dlist::node-next node1)))
    (true (dlist::node-content-compare node0 node1 #'=))
    (false (dlist::node-content-compare node1 node2 #'=))))

(define-test remove-node :parent dlist
  (let* ((dlist0 (dlist::make-dlist 1 2 3))
         (dlist1 (dlist::make-dlist 1 2 3))
         (dlist2 (dlist::make-dlist 1 2 3))
         (head0  (dlist::dlist-head dlist0))
         (mid1   (dlist::node-next (dlist::dlist-head dlist1)))
         (tail2  (dlist::dlist-tail dlist2)))
    (finish (dlist:remove-node dlist0 head0))
    (finish (dlist:remove-node dlist1 mid1))
    (finish (dlist:remove-node dlist2 tail2))
    (is equal (list 2 3) (dlist:dlist-elements dlist0))
    (is equal (list 1 3) (dlist:dlist-elements dlist1))
    (is equal (list 1 2) (dlist:dlist-elements dlist2))))

(define-test remove-tail :parent dlist
  (let* ((dlist2 (dlist::make-dlist 1 2 3))
         (tail2  (dlist::dlist-tail dlist2)))
    (finish (dlist:remove-node dlist2 tail2))
    (is equal (list 1 2) (dlist:dlist-elements dlist2))))

(define-test node-head-p/tail-p :parent dlist
  (let* ((dlist (dlist::make-dlist 1 2 3))
         (head  (dlist::dlist-head dlist))
         (mid   (dlist::node-next head))
         (tail  (dlist::dlist-tail dlist)))
    (true (dlist::node-head-p head))
    (true (dlist::node-tail-p tail))
    (false (dlist::node-head-p mid))
    (false (dlist::node-tail-p mid))))

(define-test dlist-head-p/tail-p :parent dlist
  (let* ((dlist1 (dlist::make-dlist 1 2 3))
         (head1  (dlist::dlist-head dlist1))
         (mid1   (dlist::node-next head1))
         (tail1  (dlist::dlist-tail dlist1))
         (dlist2 (dlist::make-dlist 1 2 3))
         (head2  (dlist::dlist-head dlist2))
         ;;(mid2   (dlist::node-next head2))
         (tail2  (dlist::dlist-tail dlist2)))
    (true  (dlist::dlist-head-p dlist1 head1))
    (true  (dlist::dlist-tail-p dlist1 tail1))
    (false (dlist::dlist-head-p dlist1 mid1))
    (false (dlist::dlist-tail-p dlist1 mid1))
    (false (dlist::dlist-head-p dlist1 head2))
    (false (dlist::dlist-tail-p dlist1 tail2))))

(define-test dlist-elements :parent dlist
  (let ((dlist0 (dlist::make-dlist))
        (dlist1 (dlist::make-dlist 1))
        (dlist2 (dlist::make-dlist 1 2))
        (dlist3 (dlist::make-dlist 1 2 3))
        (dlist4 (dlist::make-dlist 1 2 3 4)))
    (is equal nil (dlist:dlist-elements dlist0))
    (is equal (list 1) (dlist:dlist-elements dlist1))
    (is equal (list 1 2) (dlist:dlist-elements dlist2))
    (is equal (list 1 2 3) (dlist:dlist-elements dlist3))
    (is equal (list 1 2 3 4) (dlist:dlist-elements dlist4))))

(define-test dlist-length :parent dlist
  (let ((dlist0 (dlist::make-dlist))
        (dlist1 (dlist::make-dlist 1))
        (dlist2 (dlist::make-dlist 1 2))
        (dlist3 (dlist::make-dlist 1 2 3))
        (dlist4 (dlist::make-dlist 1 2 3 4)))
    (is = 0 (dlist:dlist-length dlist0))
    (is = 1 (dlist:dlist-length dlist1))
    (is = 2 (dlist:dlist-length dlist2))
    (is = 3 (dlist:dlist-length dlist3))
    (is = 4 (dlist:dlist-length dlist4))))

(define-test dlist-single-p :parent dlist
  (let ((dlist0 (dlist::make-dlist))
        (dlist1 (dlist::make-dlist 1))
        (dlist2 (dlist::make-dlist 1 2))
        (dlist3 (dlist::make-dlist 1 2 3))
        (dlist4 (dlist::make-dlist 1 2 3 4)))
    (false (dlist::dlist-single-p dlist0))
    (true  (dlist::dlist-single-p dlist1))
    (false (dlist::dlist-single-p dlist2))
    (false (dlist::dlist-single-p dlist3))
    (false (dlist::dlist-single-p dlist4))))

(define-test dlist-empty-p :parent dlist
  (let ((dlist0 (dlist::make-dlist))
        (dlist1 (dlist::make-dlist 1))
        (dlist2 (dlist::make-dlist 1 2))
        (dlist3 (dlist::make-dlist 1 2 3))
        (dlist4 (dlist::make-dlist 1 2 3 4)))
    (true  (dlist::dlist-empty-p dlist0))
    (false (dlist::dlist-empty-p dlist1))
    (false (dlist::dlist-empty-p dlist2))
    (false (dlist::dlist-empty-p dlist3))
    (false (dlist::dlist-empty-p dlist4))))

(define-test dlist-to-list :parent dlist
  (let ((dlist0 (dlist::make-dlist))
        (dlist1 (dlist::make-dlist 1))
        (dlist2 (dlist::make-dlist 1 2))
        (dlist3 (dlist::make-dlist 1 2 3))
        (dlist4 (dlist::make-dlist 1 2 3 4)))
    (is equal nil (dlist:dlist-elements dlist0))
    (is equal (list 1) (dlist:dlist-elements dlist1))
    (is equal (list 1 2) (dlist:dlist-elements dlist2))
    (is equal (list 1 2 3) (dlist:dlist-elements dlist3))
    (is equal (list 1 2 3 4) (dlist:dlist-elements dlist4))))

(define-test list-to-dlist :parent dlist
  (let* ((lst0 nil)
         (lst1 (list 1))
         (lst2 (list 1 2))
         (lst3 (list 1 2 3))
         (lst4 (list 1 2 3 4))
         (dlist0 (dlist::list-to-dlist lst0))
         (dlist1 (dlist::list-to-dlist lst1))
         (dlist2 (dlist::list-to-dlist lst2))
         (dlist3 (dlist::list-to-dlist lst3))
         (dlist4 (dlist::list-to-dlist lst4)))
    (is equal lst0 (dlist:dlist-elements dlist0))
    (is equal lst1 (dlist:dlist-elements dlist1))
    (is equal lst2 (dlist:dlist-elements dlist2))
    (is equal lst3 (dlist:dlist-elements dlist3))
    (is equal lst4 (dlist:dlist-elements dlist4))))

(define-test insert-dlist :parent dlist
  (let ((dlist (dlist::make-dlist)))
    (insert-head dlist 1)
    (insert-tail dlist 4)
    (insert-after dlist (dlist-head dlist) 2)
    (let* ((next-to-last (insert-before dlist (dlist-tail dlist) 3))
           (bad-node (insert-before dlist next-to-last 42)))
      (remove-node dlist bad-node))
    (is equal (list 1 2 3 4) (dlist-elements dlist))))
